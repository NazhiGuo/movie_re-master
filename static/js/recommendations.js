// 发起请求到 Flask 后端获取推荐电影数据
let page = 1; // 初始化页面 // 替换为实际用户ID
let isLoading = false; // 防止重复加载
const availableIndices = [1, 10, 100159, 100304, 100487, 100498, 100553, 100737, 1009, 101025, 101112, 101362, 101864, 101895, 101962, 102066, 102088, 102123, 102407, 102445, 102684, 102716, 103085, 103249, 103253, 1033, 103335, 103339, 103449, 1036, 103755, 103772, 103819, 104, 104241, 104243, 104303, 104339, 104374, 104841, 104879, 104913, 104925, 105351, 105653, 106072, 1061, 106489, 106540, 106542, 106594, 106696, 106785, 106916, 106918, 106920, 107069, 107406, 107436, 107630, 108, 1080, 108188, 108190, 1084, 108729, 1088, 1089, 108928, 108945, 1090, 1092, 109578, 1096, 109723, 109846, 11, 1100, 1101, 110501, 110553, 110655, 110781, 111, 111113, 111360, 111364, 111443, 111622, 111759, 111781, 111795, 112171, 112316, 112370, 112552, 112852, 112868, 112911, 112940, 113313, 114662, 114670, 114713, 114847, 114935, 115210, 115231, 115569, 115713, 116823, 117192, 117529, 117630, 117922, 118082, 118696, 118888, 118900, 1196, 119655, 1198, 12, 1200, 1203, 120478, 1206, 120799, 1208, 121007, 1214, 1217, 1220, 1221, 1222, 1224, 122888, 122890, 122892, 122896, 122900, 122902, 122916, 122924, 1232, 1236, 1245, 125, 1250, 1256, 1259, 125916, 1265, 127098, 127108, 127390, 1274, 1281, 128488, 128620, 128852, 129011, 129313, 1298, 13, 1302, 130490, 130634, 132, 132046, 1322, 1325, 132796, 1330, 133782, 134158, 134246, 1343, 134528, 135569, 1357, 135861, 136018, 136447, 136449, 136859, 136864, 1370, 1372, 137337, 137857, 138208, 138210, 138702, 1389, 139052, 1393, 1394, 139640, 139642, 139644, 14, 140162, 140174, 140237, 140267, 140627, 140850, 1409, 140928, 140956, 141408, 141688, 141749, 142074, 143257, 143355, 143410, 143859, 144620, 146028, 146309, 147250, 147410, 1479, 1483, 148626, 148709, 149334, 149508, 15, 150, 150596, 1515, 151687, 1518, 152079, 152270, 153, 1544, 155358, 155509, 1556, 156025, 1562, 156605, 1574, 158035, 1584, 158783, 158813, 1589, 159061, 16, 160080, 160438, 160563, 160954, 160980, 161354, 1615, 161594, 161830, 161922, 161966, 162082, 162350, 162414, 162598, 162602, 163645, 163981, 164179, 165, 165101, 1653, 165347, 165549, 165551, 166558, 166946, 167036, 1673, 1674, 167570, 168252, 168254, 168366, 168492, 168612, 168712, 1690, 169912, 169982, 169984, 17, 1704, 170827, 170875, 170945, 171023, 171495, 171631, 171751, 171759, 171763, 171765, 171891, 172547, 1729, 1732, 173209, 1735, 173535, 173941, 174055, 174815, 175197, 175199, 175303, 175661, 176051, 176101, 176371, 176419, 176601, 176751, 176935, 177615, 177939, 178061, 178111, 179817, 18, 180095, 180497, 180987, 181, 183011, 1833, 183911, 184015, 184471, 185029, 185585, 187595, 1876, 1882, 188301, 188751, 188797, 189333, 19, 190207, 1907, 1912, 1917, 193, 193565, 193567, 193571, 193581, 1947, 1953, 1954, 1959, 1968, 1971, 1994, 1997, 1999, 2, 20, 2004, 2005, 2011, 2012, 2021, 2023, 2028, 2069, 208, 2082, 2088, 21, 2105, 2108, 2110, 2115, 2136, 2143, 2148, 2151, 2153, 2161, 2162, 22, 2232, 2241, 2252, 2289, 2294, 23, 2301, 2322, 2328, 2338, 2367, 2375, 2393, 2394, 24, 2402, 2403, 2404, 2409, 241, 2410, 2412, 2413, 2448, 2474, 25, 2522, 2529, 2542, 2571, 25797, 2587, 26, 26082, 26265, 26391, 26394, 26413, 26492, 2654, 26612, 26662, 26693, 26701, 2671, 26741, 26819, 27, 2706, 2712, 27155, 2717, 27193, 27584, 2759, 27592, 2762, 27627, 27801, 27802, 27865, 28, 2877, 2898, 2899, 2907, 2918, 292, 2942, 296, 2985, 2986, 3, 30, 3062, 3066, 30707, 30793, 30816, 3086, 31, 3104, 3107, 31184, 31221, 31297, 31364, 3160, 31698, 318, 32, 3210, 3214, 32469, 3252, 32554, 32596, 3261, 3273, 32770, 3285, 33004, 33294, 33312, 33615, 3362, 33629, 33679, 33794, 3386, 34, 34018, 34048, 3414, 3424, 34321, 3438, 3441, 34534, 3494, 35015, 3505, 3513, 3527, 3552, 3559, 357, 35957, 3598, 36, 3606, 3615, 3635, 36525, 3668, 367, 36708, 3686, 3691, 3698, 3720, 37211, 3729, 3744, 37477, 3766, 3768, 377, 37720, 3785, 3788, 3791, 3799, 38, 3826, 3858, 3863, 3898, 39, 3916, 39183, 3925, 3932, 39446, 3959, 3977, 3981, 4, 40, 4007, 4008, 4011, 4014, 4023, 40278, 4030, 4032, 4033, 4047, 40583, 40629, 4069, 40697, 40826, 41, 412, 4132, 4144, 41569, 4161, 4191, 42, 4226, 4262, 42638, 42728, 42738, 42943, 4296, 43, 431, 4327, 43333, 4334, 4370, 43871, 43908, 43932, 4396, 44, 4407, 4437, 4441, 4443, 4447, 45, 45210, 45431, 45442, 45447, 45499, 4572, 46, 4623, 46347, 4638, 4640, 467, 468, 4717, 4745, 4770, 4772, 4794, 48, 4814, 4821, 48342, 48412, 48516, 4866, 48738, 4887, 49, 49132, 49272, 4928, 49389, 49396, 4963, 4973, 4975, 5, 50, 5009, 5010, 5013, 5023, 50445, 5064, 50802, 50942, 51088, 5112, 5120, 51255, 5139, 5152, 5171, 5178, 519, 51925, 51933, 51935, 52, 5213, 52281, 52328, 527, 52722, 5292, 53, 53123, 53125, 5325, 53322, 5349, 53519, 5378, 53894, 539, 53972, 53996, 54, 541, 5418, 54286, 5445, 5471, 54736, 5476, 54785, 54908, 55, 55020, 55067, 55274, 55278, 5540, 5553, 5574, 55805, 56145, 56176, 5630, 56587, 5669, 5679, 57, 57504, 57528, 5796, 58, 58107, 58306, 58309, 5841, 58559, 58627, 588, 58803, 5881, 5883, 589, 5891, 5903, 59220, 5925, 59315, 59369, 5938, 59387, 59440, 595, 5952, 596, 59615, 5965, 59731, 5992, 5999, 6, 60, 60037, 60069, 60072, 6030, 60514, 6063, 60684, 609, 60979, 61, 61026, 61401, 6157, 619, 6197, 62, 6210, 6213, 6219, 62374, 62437, 6250, 6270, 62999, 63, 63062, 63072, 63082, 6316, 63179, 6333, 6350, 6383, 63992, 64, 64499, 64501, 6452, 64957, 64969, 64983, 64997, 65, 6517, 6537, 656, 6568, 65682, 6595, 66203, 6660, 6663, 6664, 66785, 668, 6708, 671, 67197, 6721, 6731, 6768, 6770, 6789, 67923, 6800, 68237, 68319, 68486, 68522, 68552, 68554, 6863, 6874, 6888, 68954, 69, 6909, 691, 69251, 6947, 69481, 69526, 69640, 6979, 6987, 7, 70, 7007, 70159, 7023, 7027, 70286, 70599, 7064, 7070, 70862, 7090, 7099, 70994, 71, 7102, 71057, 71135, 7115, 71304, 7143, 71468, 7153, 71535, 72, 72011, 72378, 72591, 72605, 72733, 73, 7303, 73321, 7346, 73488, 7379, 73804, 7386, 73929, 74, 741, 7419, 7438, 74698, 74795, 7482, 75, 75341, 75389, 75395, 7569, 76, 76091, 76175, 76251, 7650, 7657, 77, 7743, 7762, 78, 78088, 78174, 7842, 79, 79091, 79185, 798, 7981, 7982, 8, 800, 80166, 80586, 80846, 80880, 80917, 80969, 81229, 81932, 82095, 82202, 82459, 8253, 82667, 82765, 829, 8375, 83803, 84187, 84374, 84601, 8493, 84954, 8501, 85020, 85022, 85131, 85295, 8534, 85397, 85401, 85414, 8542, 858, 86014, 86298, 86332, 8636, 866, 86644, 8665, 8666, 86817, 86892, 87194, 87232, 87520, 87785, 8795, 88140, 8879, 89, 89087, 891, 8912, 8916, 8939, 89470, 8958, 89586, 8965, 89753, 89774, 89804, 8983, 8984, 89840, 89864, 899, 9, 90343, 90345, 90405, 905, 90600, 90603, 90719, 90866, 90888, 911, 91529, 91628, 91974, 91976, 924, 927, 93242, 93272, 93297, 93502, 93838, 94018, 946, 94810, 95, 95105, 95163, 95170, 95193, 95441, 95510, 95519, 95858, 96432, 96610, 96728, 96861, 97304, 97752, 97836, 97921, 97923, 98154, 98203, 98585, 98607, 98623, 98633, 98961, 99087, 99112, 99574, 99638];
document.addEventListener('DOMContentLoaded', function() {
    const savedUserId = localStorage.getItem('userId');
    if (savedUserId) {
        // 如果保存了 userId，则使用它来获取推荐数据
        const userId = parseInt(savedUserId, 10);
        if (!isNaN(userId)) {
            fetchRecommendations(userId, page);
        }
    } else {
        fetchRecommendations(575, page);
    }
});
function getImageFile(index) {
    const imgPath = `../static/images/${index}.jpg`;
    const fallbackFolderPath = '../static/images/';

    // 判断 index 是否在 availableIndices 中
    if (availableIndices.includes(index)) {
        return imgPath; // 如果 index 在列表中，直接返回指定路径
    }

    // 如果 index 不存在，从 availableIndices 中随机选择一个索引
    const randomIndex = availableIndices[Math.floor(Math.random() * availableIndices.length)];
    return `${fallbackFolderPath}${randomIndex}.jpg`;
}
function fetchRecommendations(userId, page = 1) {
  isLoading = true; // 开始加载时设置为 true
  fetch('/recommend', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ userId, page }) // 添加分页参数
  })
    .then(response => response.json())
    .then(data => {
      if (data.recommendations) {
        updateRecommendationsList(data.recommendations);
      } else {
        console.error(data.error || '无推荐数据');
      }
    })
    .catch(error => console.error('获取推荐数据出错:', error))
    .finally(() => {
      isLoading = false; // 加载结束后设置为 false
    });
}

// 更新 HTML 中的推荐列表
function updateRecommendationsList(recommendations) {
  const recommendationsList = document.getElementById('recommendations-list');

  for (const recommendation of recommendations) {
    // 使用 getImageFile 函数异步获取图片路径
    const imgSrc = getImageFile(recommendation.movieId);
    const listItem = document.createElement('li');
    listItem.classList.add('product-item');
    listItem.innerHTML = `
      <div class="product-card" tabindex="0">
        <figure class="product-banner">
          <img src="${imgSrc}" alt="${recommendation.title}">
          <div class="product-actions">
            <button class="product-card-menu">
              <ion-icon name="ellipsis-horizontal"></ion-icon>
            </button>
            <button class="add-to-whishlist" data-whishlist-btn>
              <ion-icon name="heart"></ion-icon>
            </button>
          </div>
          <button class="place-bid-btn">Watch</button>
        </figure>
        <div class="product-content">
          <a href="#" class="h4 product-title">${recommendation.title}</a>
          <div class="product-meta">
            <div class="product-author">
              <figure class="author-img">
                <img src="../static/images/bidding-user.png" alt="Jack Reacher">
              </figure>
              <div class="author-content">
                <h4 class="h5 author-title">Director</h4>
                <a href="#" class="author-username">@Jack</a>
              </div>
            </div>
            <div class="product-price">
              <data value="0.568">IMDB</data>
              <p class="label">4.7</p>
            </div>
          </div>
          <div class="product-footer">
            <p class="total-bid">1 year ago</p>
            <button class="tag">More</button>
          </div>
        </div>
      </div>
    `;
    recommendationsList.appendChild(listItem);
  }
}
window.addEventListener('scroll', () => {
  if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight - 100 && !isLoading) {
    // 如果页面滚动到底部，且不是在加载状态，则加载下一页
    page++;
    fetchRecommendations(userId, page);
  }
});
// 调用函数获取推荐列表
fetchRecommendations(userId, page); // 这里替换为实际的 userId